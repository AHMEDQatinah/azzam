/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */
(function (n, t) { if (typeof exports == "object" && exports) t(exports); else { var i = {}; t(i); typeof define == "function" && define.amd ? define(i) : n.Mustache = i } })(this, function (n) { function a(n, t) { return l.call(n, t) } function y(n) { return !a(v, n) } function u(n) { return typeof n == "function" } function o(n) { return n.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&") } function b(n) { return String(n).replace(/[&<>"'\/]/g, function (n) { return w[n] }) } function s(n) { if (!e(n) || n.length !== 2) throw new Error("Invalid tags: " + n); return [new RegExp(o(n[0]) + "\\s*"), new RegExp("\\s*" + o(n[1]))] } function nt(t, i) { function st() { if (ft && !b) while (w.length) delete p[w.pop()]; else w = []; ft = !1; b = !1 } var a, f, e, nt, et, v, rt, ot; i = i || n.tags; t = t || ""; typeof i == "string" && (i = i.split(h)); for (var l = s(i), u = new r(t), ut = [], p = [], w = [], ft = !1, b = !1; !u.eos();) { if (a = u.pos, e = u.scanUntil(l[0]), e) for (rt = 0, ot = e.length; rt < ot; ++rt) nt = e.charAt(rt), y(nt) ? w.push(p.length) : b = !0, p.push(["text", nt, a, a + 1]), a += 1, nt === "\n" && st(); if (!u.scan(l[0])) break; if (ft = !0, f = u.scan(g) || "name", u.scan(k), f === "=" ? (e = u.scanUntil(c), u.scan(c), u.scanUntil(l[1])) : f === "{" ? (e = u.scanUntil(new RegExp("\\s*" + o("}" + i[1]))), u.scan(d), u.scanUntil(l[1]), f = "&") : e = u.scanUntil(l[1]), !u.scan(l[1])) throw new Error("Unclosed tag at " + u.pos); if (et = [f, e, a, u.pos], p.push(et), f === "#" || f === "^") ut.push(et); else if (f === "/") { if (v = ut.pop(), !v) throw new Error('Unopened section "' + e + '" at ' + a); if (v[1] !== e) throw new Error('Unclosed section "' + v[1] + '" at ' + a); } else f === "name" || f === "{" || f === "&" ? b = !0 : f === "=" && (l = s(i = e.split(h))) } if (v = ut.pop(), v) throw new Error('Unclosed section "' + v[1] + '" at ' + u.pos); return it(tt(p)) } function tt(n) { for (var u = [], t, i, r = 0, f = n.length; r < f; ++r) t = n[r], t && (t[0] === "text" && i && i[0] === "text" ? (i[1] += t[1], i[3] = t[3]) : (u.push(t), i = t)); return u } function it(n) { for (var u = [], r = u, i = [], t, e, f = 0, o = n.length; f < o; ++f) { t = n[f]; switch (t[0]) { case "#": case "^": r.push(t); i.push(t); r = t[4] = []; break; case "/": e = i.pop(); e[5] = t[2]; r = i.length > 0 ? i[i.length - 1][4] : u; break; default: r.push(t) } } return u } function r(n) { this.string = n; this.tail = n; this.pos = 0 } function t(n, t) { this.view = n == null ? {} : n; this.cache = { ".": this.view }; this.parent = t } function i() { this.cache = {} } var l = RegExp.prototype.test, v = /\S/, p = Object.prototype.toString, e = Array.isArray || function (n) { return p.call(n) === "[object Array]" }, w = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#x2F;" }, k = /\s*/, h = /\s+/, c = /\s*=/, d = /\s*\}/, g = /#|\^|\/|>|\{|&|=|!/, f; r.prototype.eos = function () { return this.tail === "" }; r.prototype.scan = function (n) { var i = this.tail.match(n), t; return i && i.index === 0 ? (t = i[0], this.tail = this.tail.substring(t.length), this.pos += t.length, t) : "" }; r.prototype.scanUntil = function (n) { var i = this.tail.search(n), t; switch (i) { case -1: t = this.tail; this.tail = ""; break; case 0: t = ""; break; default: t = this.tail.substring(0, i); this.tail = this.tail.substring(i) } return this.pos += t.length, t }; t.prototype.push = function (n) { return new t(n, this) }; t.prototype.lookup = function (n) { var t, i, r, f; if (n in this.cache) t = this.cache[n]; else { for (i = this; i;) { if (n.indexOf(".") > 0) for (t = i.view, r = n.split("."), f = 0; t != null && f < r.length;) t = t[r[f++]]; else t = i.view[n]; if (t != null) break; i = i.parent } this.cache[n] = t } return u(t) && (t = t.call(this.view)), t }; i.prototype.clearCache = function () { this.cache = {} }; i.prototype.parse = function (n, t) { var r = this.cache, i = r[n]; return i == null && (i = r[n] = nt(n, t)), i }; i.prototype.render = function (n, i, r) { var u = this.parse(n), f = i instanceof t ? i : new t(i); return this.renderTokens(u, f, r, n) }; i.prototype.renderTokens = function (t, i, r, f) { function y(n) { return v.render(n, i, r) } for (var c, a, h = "", v = this, s, o, l = 0, p = t.length; l < p; ++l) { s = t[l]; switch (s[0]) { case "#": if (o = i.lookup(s[1]), !o) continue; if (e(o)) for (c = 0, a = o.length; c < a; ++c) h += this.renderTokens(s[4], i.push(o[c]), r, f); else if (typeof o == "object" || typeof o == "string") h += this.renderTokens(s[4], i.push(o), r, f); else if (u(o)) { if (typeof f != "string") throw new Error("Cannot use higher-order sections without the original template"); o = o.call(i.view, f.slice(s[3], s[5]), y); o != null && (h += o) } else h += this.renderTokens(s[4], i, r, f); break; case "^": o = i.lookup(s[1]); (!o || e(o) && o.length === 0) && (h += this.renderTokens(s[4], i, r, f)); break; case ">": if (!r) continue; o = u(r) ? r(s[1]) : r[s[1]]; o != null && (h += this.renderTokens(this.parse(o), i, r, o)); break; case "&": o = i.lookup(s[1]); o != null && (h += o); break; case "name": o = i.lookup(s[1]); o != null && (h += n.escape(o)); break; case "text": h += s[1] } } return h }; n.name = "mustache.js"; n.version = "0.8.1"; n.tags = ["{{", "}}"]; f = new i; n.clearCache = function () { return f.clearCache() }; n.parse = function (n, t) { return f.parse(n, t) }; n.render = function (n, t, i) { return f.render(n, t, i) }; n.to_html = function (t, i, r, f) { var e = n.render(t, i, r); if (u(f)) f(e); else return e }; n.escape = b; n.Scanner = r; n.Context = t; n.Writer = i });
var vehicleGallery = vehicleGallery || {};

vehicleGallery.API = {
    gallery: [],
    GalleryContainerId: '',
    GalleryTemplateId: 'galleryTemplate',
    getGalleryItems: function (id) {
        $("#galleryContainer-" + id).closest(".tt-gallery-block").addClass("loading");
        $.ajax({
            url: '/api/Vehicle/GetAlbum',
            method: 'GET',
            async: false,
            data: {
                albumId: $('#parentId-' + id).val(),
                skip: parseInt($('#skipValue-' + id).val()),
                take: parseInt($('#takeValue-' + id).val()),
            },
            success: function (response) {

                if (response.AlbumItems.length > 0) {
                    vehicleGallery.API.gallery = response.AlbumItems
                    vehicleGallery.API.renderGallery();
                    $('#skipValue-' + id).val(parseInt($('#skipValue-' + id).val()) + parseInt($('#takeValue-' + id).val()));
                    var length = $("#galleryContainer-" + id + " > div").length;
                    if (length >= response.count) {
                        $('#loadmore-' + id).hide();
                    }
                    $("#galleryContainer-" + id).find('.vbox-item').attr('data-gall', id);

                    app.venobox();
                }
                $("#galleryContainer-" + id).closest(".tt-gallery-block").removeClass("loading");
            },
            error: function (error) {
                console.log("Json post failed");
                $("#galleryContainer-" + id).closest(".tt-gallery-block").removeClass("loading");
            }

        });
    },
    renderGallery: function () {
        for (var index = 0; index < vehicleGallery.API.gallery.length; index++) {
            vehicleGallery.API.renderMarkup(vehicleGallery.API.GalleryTemplateId, vehicleGallery.API.GalleryContainerId, vehicleGallery.API.gallery[index]);
        }
    },
    renderMarkup: function (templateId, containerId, data) {
        var template = document.getElementById(templateId).innerHTML;
        var html = Mustache.to_html(template, data);
        $('#' + containerId).append(html);
    },
    init: function (id) {
        this.getGalleryItems(id);
    },
}


$(document).ready(function () {
    if ($("#galleryTemplate").length > 0) {
        $(".component.gallery.tt-gallery-block").each(function () {
            var galleryId = $(this).find(".row.main-row.galleryContainer").attr("id").replace('galleryContainer-', '');
            vehicleGallery.API.GalleryContainerId = "galleryContainer-" + galleryId;
            vehicleGallery.API.getGalleryItems(galleryId);

            $(this).find('#loadmore-' + galleryId).on('click', function () {
                //vehicleGallery.API.GalleryContainerId =  $(this).parent().parent().parent().find(".row.main-row.galleryContainer").attr("id");
                vehicleGallery.API.GalleryContainerId = "galleryContainer-" + galleryId;
                vehicleGallery.API.init(galleryId);
            });
        });
    }
});
$(document).ajaxComplete(function () {
    app.venobox();
});
var modelSpot = modelSpot || {};

modelSpot.API = {
    fullSpecLink: $('#fullSpecLink'),
    updateQueryString: function (key, value, url) {
        if (!url) url = window.location.href;
        var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
            hash;

        if (re.test(url)) {
            if (typeof value !== 'undefined' && value !== null)
                return url.replace(re, '$1' + key + "=" + value + '$2$3');
            else {
                hash = url.split('#');
                url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                if (typeof hash[1] !== 'undefined' && hash[1] !== null)
                    url += '#' + hash[1];
                return url;
            }
        }
        else {
            if (typeof value !== 'undefined' && value !== null) {
                var separator = url.indexOf('?') !== -1 ? '&' : '?';
                hash = url.split('#');
                url = hash[0] + separator + key + '=' + value;
                if (typeof hash[1] !== 'undefined' && hash[1] !== null)
                    url += '#' + hash[1];
                return url;
            }
            else
                return url;
        }
    },
    onFullSpecLinkClick: function () {
        this.fullSpecLink.click(function () {
            var vehicleId = $('.swiper-slide-active').data('id');
            var url = modelSpot.API.fullSpecLink.attr('href');
            if (!(url == 'javascript:void(0)' || url == 'javascript:void(0);')) {
                var updatedUrl = modelSpot.API.updateQueryString('id', vehicleId, url);
                window.location.href = updatedUrl;
            }
            return false;
        })
    },
    init: function () {
        this.onFullSpecLinkClick();
    }
}

$(document).ready(function () {
    modelSpot.API.init();
});
var vehicle = vehicle || {};
//$("#mainVehicleLoader").addClass("loading");
vehicle.API = {
    mainCategoryObj: '',
    subCategoryObj: '',
    vehicleGradesObj: '',
    vehicleViewModel: [],
    vehicleCompareContainer: $('#vehicleCompareContainer'),
    vehicleCompareTemplate: $('#vehicleCompareTemplate'),
    currentVehicleId: '',
    currentSelectedModelId: '',
    SpecCompareModelBox1: $('#contentModelBox1').html(),
    SpecCompareModelBox2: $('#contentModelBox2').html(),
    SpecCompareModelBox3: $('#contentModelBox3').html(),
    venobox: null,
    vehicalArray: [],
    vehicalArrayHasLastValue: false,
    isFirstModelUpdated: true,
    firstLoad: true,
    vehicleBasedSubCategories: [],
    getCompareVehicle: function (vehicleid, selectedCarIndex) {
        var apiUrl = '/api/getcomparevehicles';

        if (vehicleid != undefined && vehicleid != '' && vehicleid.length > 0) {
            $.ajax({
                url: apiUrl,
                method: "GET",
                async: false,
                dataType: "json",
                timeout: 160000,
                cache: false,
                data: {
                    vehicleId: vehicleid,
                    culture: $('html').attr('lang')

                },
                success: function (response) {

                    if (response && response.Status) {
                        vehicle.API.vehicalArray.push(response.Vehicle);
                        if (vehicle.API.vehicalArray[0] != undefined
                            && vehicle.API.vehicalArray[1] != undefined
                            && vehicle.API.vehicalArray[2] != undefined
                            && !vehicle.API.vehicalArrayHasLastValue) {
                            if (parseInt(vehicle.API.currentSelectedModelId) == 1) {
                                vehicle.API.vehicalArray = vehicle.API.shiftArrayItem(vehicle.API.vehicalArray, 1, 2);
                                vehicle.API.vehicalArray = vehicle.API.shiftArrayItem(vehicle.API.vehicalArray, 0, 1);
                            }
                            else if (parseInt(vehicle.API.currentSelectedModelId) == 2) {
                                vehicle.API.vehicalArray = vehicle.API.shiftArrayItem(vehicle.API.vehicalArray, 1, 2);
                            }
                        }
                        else if (vehicle.API.vehicalArray[0] != undefined
                            && vehicle.API.vehicalArray[1] != undefined
                            && !vehicle.API.isFirstModelUpdated
                            && vehicle.API.currentSelectedModelId == "1") {
                            vehicle.API.vehicalArray = vehicle.API.shiftArrayItem(vehicle.API.vehicalArray, 0, 1);
                        }


                        vehicle.API.maintainSubCategoryHistory(parseInt(vehicle.API.currentSelectedModelId), response.SubCategories, response.Vehicle.Id);
                        if (response.SubCategories.length) {
                            vehicle.API.subCategoryObj = vehicle.API.updateVehicleCategoryList(response.SubCategories);
                        }
                        vehicle.API.vehicleViewModel = [];
                        vehicle.API.generateVehicleViewModel();

                        for (var i = 0; i < vehicle.API.vehicalArray.length; i++) {
                            vehicle.API.updateVehicleViewModel(vehicle.API.vehicalArray[i], i);
                        }

                        vehicle.API.updateContentModelBox(selectedCarIndex, response.Vehicle);
                        vehicle.API.generateVehicleCompareMarkup(vehicle.API.vehicleViewModel);
                        vehicle.API.updateEmptyMarkup();
                    }
                    else {
                        vehicle.API.noResouldFound();
                    }

                    $("#mainVehicleLoader").removeClass("loading");
                    $('.vbox-preloader').hide();
                    if (vehicle.API.firstLoad) {
                        app.ttAccordion();
                        vehicle.API.firstLoad = false;
                    }
                },
                error: function () {
                    console.log("Error in compare vehicle component");
                    $("#mainVehicleLoader").removeClass("loading");
                    $('.vbox-preloader').hide();
                }
            });
        }
    },
    generateVehicleViewModel: function () {
        if (this.subCategoryObj != null && this.subCategoryObj != "") {

            //var mainCategories = [];
            //for (var i = 0; i < this.mainCategoryObj.length; i++) {
            //    mainCategories.push({
            //        id: this.mainCategoryObj[i].ItemId,
            //        title: this.mainCategoryObj[i].title,
            //        hasSubCategories: false,
            //        subCategories: []
            //    });
            //}

            var subCategories = [];
            for (var i = 0; i < this.subCategoryObj.length; i++) {

                var lineItems = [];
                if (this.subCategoryObj[i].lineItems != null && this.subCategoryObj[i].lineItems.length > 0) {
                    for (var x = 0; x < this.subCategoryObj[i].lineItems.length; x++) {
                        lineItems.push({
                            id: this.subCategoryObj[i].lineItems[x].ItemId,
                            title: this.subCategoryObj[i].lineItems[x].title,
                            /*
                              By default hasLineItems property is false. It will set true when we updating it's values from updateVehicleViewModel()'
                            */
                            hasLineItems: false,
                            values: [{
                                id: 1,
                                value: ''
                            },
                            {
                                id: 2,
                                value: ''
                            }, {
                                id: 3,
                                value: ''
                            }]
                        });
                    }
                }

                subCategories.push({
                    id: this.subCategoryObj[i].ItemId,
                    title: this.subCategoryObj[i].title,
                    showSubCategory: false,
                    mainCategoryId: this.subCategoryObj[i].mainCategoryId,
                    lineItems: lineItems
                });

                //$.each(mainCategories, function (index, value) {
                //    if (value.id == subCategories[i].mainCategoryId) {
                //        value.subCategories.push(subCategories[i]);
                //        //value.hasSubCategories = true;
                //        return false;
                //    }
                //});
            }
            this.vehicleViewModel = subCategories;
        }
    },
    updateVehicleViewModel: function (vehicle, vindex) {
        if (this.vehicleViewModel != null && vehicle != null && vehicle.Categories != null && vehicle.Categories.length > 0) {
            for (var i = 0; i < vehicle.Categories.length; i++) {
                if (this.vehicleViewModel != null && this.vehicleViewModel.length > 0) {
                    for (var v = 0; v < this.vehicleViewModel.length; v++) {
                        if (vehicle.Categories[i].SubCategoryId.toLowerCase().replace(/[\{\}]/g, "") == this.vehicleViewModel[v].id) {
                            if (this.vehicleViewModel[v].lineItems != null && this.vehicleViewModel[v].lineItems.length > 0) {
                                for (var x = 0; x < this.vehicleViewModel[v].lineItems.length; x++) {

                                    if (vehicle.Categories[i].LineItem != null && vehicle.Categories[i].LineItem.length > 0) {

                                        for (var index = 0; index < vehicle.Categories[i].LineItem.length; index++) {

                                            if (vehicle.Categories[i].LineItem[index].LineItem.toLowerCase().replace(/[\{\}]/g, "") == this.vehicleViewModel[v].lineItems[x].id) {
                                                //this.vehicleViewModel[v].subCategories[sc].lineItems[x].values.push({
                                                //    id: this.currentVehicleId + this.currentSelectedModelId,
                                                //    value: vehicle.Categories[i].LineItem[index].Value
                                                //});
                                                this.vehicleViewModel[v].lineItems[x].values[vindex].id = vindex;
                                                this.vehicleViewModel[v].lineItems[x].values[vindex].value = vehicle.Categories[i].LineItem[index].Value;
                                                this.vehicleViewModel[v].lineItems[x].hasLineItems = true;
                                                this.vehicleViewModel[v].showSubCategory = true;
                                                this.vehicleViewModel[v].hasSubCategories = true;
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
            }
        }
    },
    removeVehicalFromVehicalArray: function (vehicleId) {
        vehicle.API.vehicalArray = vehicle.API.vehicalArray.filter(function (item) {
            return item.Id !== vehicleId;
        });
    },
    hasVehicleInArray: function (vehicleId) {
        var tempArray = vehicle.API.vehicalArray.filter(function (item) {
            return item.Id === vehicleId;
        });

        if (tempArray != null && tempArray.length > 0) {
            return true;
        }
        else {
            return false;
        }
    },
    noResouldFound: function () {

    },
    generateVehicleCompareMarkup: function (data) {
        vehicle.API.vehicleCompareContainer.html('');
        var template = vehicle.API.vehicleCompareTemplate.html();
        var templateOutput = Mustache.to_html(template, data);
        vehicle.API.vehicleCompareContainer.html(templateOutput);
        this.expandFirstAccordion();
    },
    generateVehiclesOverlayMarkUp: function (firstLoad) {
        if (vehicle.API.vehicleGradesObj != undefined && vehicle.API.vehicleGradesObj != null && vehicle.API.vehicleGradesObj.length > 0) {
            var templateOutput = '';
            $("#vehicalContainer").html('');
            var template = $("#vehiclesTemplate").html();
            for (var i = 0; i < vehicle.API.vehicleGradesObj.length; i++) {

                if (firstLoad) {
                    if (vehicle.API.currentVehicleId != undefined && vehicle.API.currentVehicleId != '' && vehicle.API.currentVehicleId.length > 0) {
                        if (vehicle.API.currentVehicleId.toLowerCase().replace(/[\{\}]/g, "") != vehicle.API.vehicleGradesObj[i].ItemId.toLowerCase().replace(/[\{\}]/g, "")) {
                            templateOutput = Mustache.to_html(template, vehicle.API.vehicleGradesObj[i]);
                            $("#vehicalContainer").append(templateOutput);
                        }
                    }
                    else {
                        templateOutput = Mustache.to_html(template, vehicle.API.vehicleGradesObj[i]);
                        $("#vehicalContainer").append(templateOutput);
                    }
                }
                else {
                    if (!vehicle.API.hasVehicleInArray(vehicle.API.vehicleGradesObj[i].ItemId)) {
                        templateOutput = Mustache.to_html(template, vehicle.API.vehicleGradesObj[i]);
                        $("#vehicalContainer").append(templateOutput);
                    }
                }
            }
        }

    },
    expandFirstAccordion: function () {
        $('.tt-first-active')
            .find('.accordion-inner:first-child').addClass('expand')
            .find('> h4:first-child').addClass('active')
            .end().find('.tt-content').addClass('show').show();
    },
    onCarSelect: function () {
        $(document).on('click', '.car-selector', function () {
            $('.car-selector').removeClass('active');
            $(this).addClass('active');
        });
    },
    onVehicleSubmitClick: function () {
        $(document).on('click', '#vehiclebtnSubmit', function () {
            $('.vbox-preloader').show();
            setTimeout(function () {
                var selectedCar = $('.car-selector.active');
                if (selectedCar.length > 0) {
                    var modelId = vehicle.API.currentSelectedModelId;
                    if ($('#contentModelBox' + modelId).data('vehicleid') != '') {
                        var vehicleId = $('#contentModelBox' + modelId).data('vehicleid');
                        vehicle.API.vehicalArrayHasLastValue = vehicle.API.vehicalArray[2] == undefined;
                        var hasvehicleDatainSecondIndex = vehicle.API.vehicalArray[1] != undefined && modelId == "1";
                        vehicle.API.removeVehicalFromVehicalArray(vehicleId);
                        vehicle.API.isFirstModelUpdated = hasvehicleDatainSecondIndex && vehicle.API.vehicalArray[1] != undefined && modelId == "1";

                    }

                    vehicle.API.currentVehicleId = selectedCar.data('vehicleid');
                    vehicle.API.getCompareVehicle(vehicle.API.currentVehicleId, modelId);
                    vehicle.API.generateVehiclesOverlayMarkUp(false);
                }
                vehicle.API.venobox.VBclose();

                $(".image").each(function () {
                    if ($(this).children("img").length == 0 || $(this).children("img").attr('src') == "") {
                        $(this).addClass("empty");
                        $(this).parent().addClass("empty");
                    }
                });
            }, 100);



        });

    },
    updateContentModelBox: function (selectedIndex, vehicleModel) {

        var contentModelBox = selectedIndex == 1 ? vehicle.API.SpecCompareModelBox1 : '';
        contentModelBox = selectedIndex == 2 ? vehicle.API.SpecCompareModelBox2 : contentModelBox;
        contentModelBox = selectedIndex == 3 ? vehicle.API.SpecCompareModelBox3 : contentModelBox;

        $('#contentModelBox' + selectedIndex).show();
        $('#addModel' + selectedIndex).hide();
        $('#contentModelBox' + selectedIndex).html('');
        $('#contentModelBox' + selectedIndex).html(contentModelBox);
        var updatedContent = contentModelBox.replace('{logoimage}', vehicleModel.Logo)
            .replace('{hoverimage}', vehicleModel.LogoHover)
            .replace('{title}', vehicleModel.Title)
            .replace('{startingcost}', vehicleModel.StartingPrice != undefined && vehicleModel.StartingPrice != '' ? vehicleModel.StartingPrice : vehicleModel.NowPrice)
            .replace('{vehicleid}', vehicleModel.Id)
            .replace('{displayStartingCost}', vehicleModel.StartingPrice != undefined && vehicleModel.StartingPrice != '' ? "inline-flex;" : "none;")
            .replace('{displayNowCost}', vehicleModel.StartingPrice != undefined && vehicleModel.StartingPrice != '' ? "none;" : "inline-flex;")
            .replace('{previousprice}', vehicleModel.StartingPrice == '' ? vehicleModel.PreviousPrice : '');

        $('#contentModelBox' + selectedIndex).html(updatedContent);
        $('#contentModelBox' + selectedIndex).parent().removeClass("link-disabled");
        $('#contentModelBox' + selectedIndex).parent().next().removeClass("link-disabled");

        if (vehicle.API.vehicleGradesObj.length === 1) {
            if ($("#addModel1").css("display") === "none") {
                $("#updateModel1").hide();
            }
        }
        else if (vehicle.API.vehicleGradesObj.length === 2) {
            if ($("#addModel2").css("display") === "none") {
                $("#updateModel1").hide();
                $("#updateModel2").hide();
            }
        }
        else if (vehicle.API.vehicleGradesObj.length === 3) {

            if ($("#addModel3").css("display") === "none") {
                $("#updateModel1").hide();
                $("#updateModel2").hide();
                $("#updateModel3").hide();
            }
        }

        this.loadVenobox();
    },
    onUpdateModelBoxClick: function (selectedIndex) {
        vehicle.API.currentSelectedModelId = selectedIndex;
        var vehicleId = $('#updateModel' + selectedIndex).data('vehicleid');
        $('#contentModelBox' + selectedIndex).data('vehicleid', vehicleId);

    },
    onAddModelBoxClick: function (selectedIndex) {
        vehicle.API.currentSelectedModelId = selectedIndex;
    },
    loadVenobox: function () {
        vehicle.API.venobox = $('.venobox-choose-car').venobox({
            overlayClose: false,
            numeratio: false,
        });
    },
    shiftArrayItem: function (arr, old_index, new_index) {
        if (new_index >= arr.length) {
            var k = new_index - arr.length + 1;
            while (k--) {
                arr.push(undefined);
            }
        }
        arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
        return arr;
    },
    getQueryStringValue: function (name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    },
    validateDatasources: function () {
        //if (mainCategories != undefined && mainCategories != null) {
        //    vehicle.API.mainCategoryObj = JSON.parse(mainCategories);
        //}

        //if (subCategories !== "" && subCategories != undefined && subCategories != null && subCategories !== "[]") {
        //    vehicle.API.subCategoryObj = JSON.parse(subCategories);
        //}

        if (vehicleGrades !== "" && vehicleGrades !== undefined && vehicleGrades !== null && vehicleGrades !== "[]") {
            vehicle.API.vehicleGradesObj = JSON.parse(vehicleGrades);
            $("#vehicleComponent").show();

            if (vehicle.API.vehicleGradesObj.length === 2) {
                $("#contentModelBox2Container").show();
                $("#updateModel1").show();
            }
            else if (vehicle.API.vehicleGradesObj.length === 3) {
                $("#contentModelBox2Container").show();
                $("#contentModelBox3Container").show();
                $("#updateModel1").show();
                $("#updateModel2").show();
            }
            else if (vehicle.API.vehicleGradesObj.length > 3) {
                $("#contentModelBox2Container").show();
                $("#contentModelBox3Container").show();

                $("#updateModel1").show();
                $("#updateModel2").show();
                $("#updateModel3").show();

            }
        }
    },
    updateEmptyMarkup: function () {
        var tableLength = $("#vehicleCompareContainer .tt-content table").length;
        if (tableLength > 0) {
            for (var tbIndex = 0; tbIndex < tableLength; tbIndex++) {
                var lineItemRows = $("#vehicleCompareContainer .tt-content table").eq(tbIndex).find("tr.lineitem").length;
                if (lineItemRows > 0) {
                    for (var rowIndex = 0; rowIndex < lineItemRows; rowIndex++) {
                        var valItemColumns = $("#vehicleCompareContainer .tt-content table").eq(tbIndex).find("tr.lineitem").eq(rowIndex).find("td#val").length;
                        if (valItemColumns > 0) {
                            for (var vehicleIndex = 0; vehicleIndex < parseInt(vehicle.API.vehicalArray.length); vehicleIndex++) {
                                var currentElement = $("#vehicleCompareContainer .tt-content table").eq(tbIndex).find("tr.lineitem").eq(rowIndex).find("td#val").eq(vehicleIndex);
                                if (currentElement.html() === "") {
                                    //currentElement.html("<span class='value-false'></span>");
                                    currentElement.html("-");
                                }
                            }
                        }
                    }
                }

            }
        }
    },
    escapeCharacters: function (json) {
        var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        var meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        };

        escapable.lastIndex = 0;
        return escapable.test(json) ? '"' + json.replace(escapable, function (a) {
            var c = meta[a];
            return (typeof c === 'string') ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + json + '"';
    },
    updateVehicleCategoryList: function (categoryList) {
        var newCategoryList = [];
        var updatedCategory = [];
        if (vehicle.API.vehicleBasedSubCategories != null) {
            for (var k = 0; k < vehicle.API.vehicleBasedSubCategories.length; k++) {
                if (vehicle.API.vehicleBasedSubCategories[k].categories != null) {
                    for (var i = 0; i < vehicle.API.vehicleBasedSubCategories[k].categories.length; i++) {
                        var category = categoryList.find(x => x.ItemId === vehicle.API.vehicleBasedSubCategories[k].categories[i].ItemId);
                        if (typeof category !== "undefined") {
                            newCategoryList = vehicle.API.vehicleBasedSubCategories[k].categories[i];
                            newCategoryList.lineItems = this.mergeCategories(newCategoryList.lineItems, category.lineItems);
                            var updatedCategoryItemIndex = updatedCategory.findIndex(item => item.ItemId == newCategoryList.ItemId);
                            if (updatedCategoryItemIndex != -1) {
                                updatedCategory[updatedCategoryItemIndex].lineItems = newCategoryList.lineItems
                            } else {
                                updatedCategory.push(newCategoryList);
                            }
                        }
                        else {
                            updatedCategory.push(vehicle.API.vehicleBasedSubCategories[k].categories[i]);
                        }
                    }
                }
            }

            return updatedCategory.length ? updatedCategory : categoryList;
        }
        else {
            return categoryList;
        }

    },
    maintainSubCategoryHistory: function (modelIndex, subCategories, vehicleId) {
        if (vehicle.API.vehicleBasedSubCategories != null) {
            var objectContainsModelBoxIndex = vehicle.API.vehicleBasedSubCategories.find(x => x.modelBoxIndex === modelIndex);
            if (objectContainsModelBoxIndex != undefined) {

                var removableObject = vehicle.API.vehicleBasedSubCategories.filter(x => x.modelBoxIndex != modelIndex);
                removableObject.push({
                    modelBoxIndex: modelIndex,
                    vehicleId: vehicleId,
                    categories: subCategories
                });

                vehicle.API.vehicleBasedSubCategories = removableObject;
            }
            else {
                vehicle.API.vehicleBasedSubCategories.push({
                    modelBoxIndex: modelIndex,
                    vehicleId: vehicleId,
                    categories: subCategories
                });
            }
        }
        else {
            vehicle.API.vehicleBasedSubCategories.push({
                modelBoxIndex: modelIndex,
                vehicleId: vehicleId,
                categories: subCategories
            });
        }
    },
    mergeCategories: function (a, b) {
        for (var i = 0; i < b.length; i++) {
            var duplicateEntry = a.find(item => item.ItemId == b[i].ItemId)
            if (typeof duplicateEntry === 'undefined') {
                a.push(b[i])
            }
        }
        return a
    },
    init: function () {
        this.validateDatasources();
        this.currentSelectedModelId = 1;
        var vehicleId = this.getQueryStringValue('id');
        if (vehicleId == null) {
            vehicleId = $('#vehicleComponent').data('defaultvehicleid');
        }
        this.currentVehicleId = vehicleId;
        this.loadVenobox();
        this.getCompareVehicle(this.currentVehicleId, this.currentSelectedModelId);
        this.generateVehiclesOverlayMarkUp(true);
        this.onCarSelect();
        this.onVehicleSubmitClick();
    }
}

$(document).ready(function () {

    if ($("#vehicleComponent").length > 0) {
        vehicle.API.init();
        venobox = $('.venobox-choose-car').venobox({
            overlayClose: false,
            numeratio: false,
        });
        $(document).on('click', '#vehiclebtnCancel', function () {
            $('.vbox-close').trigger('click');
        });
    }

});
